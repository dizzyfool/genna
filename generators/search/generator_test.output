//nolint
//lint:file-ignore U1000 ignore unused code, it's generated
package model

import (
	"github.com/go-pg/pg/v9"
	"github.com/go-pg/pg/v9/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.F(table), pg.F(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type ProjectSearch struct {
	search

	ID   *int
	Name *string
}

func (s *ProjectSearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		s.where(query, Tables.Project.Alias, Columns.Project.ID, s.ID)
	}
	if s.Name != nil {
		s.where(query, Tables.Project.Alias, Columns.Project.Name, s.Name)
	}

	s.apply(query)

	return query
}

func (s *ProjectSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}

type UserSearch struct {
	search

	ID        *int
	Email     *string
	Activated *bool
	Name      *string
	CountryID *int
	Avatar    *[]byte
	AvatarAlt *[]byte
}

func (s *UserSearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		s.where(query, Tables.User.Alias, Columns.User.ID, s.ID)
	}
	if s.Email != nil {
		s.where(query, Tables.User.Alias, Columns.User.Email, s.Email)
	}
	if s.Activated != nil {
		s.where(query, Tables.User.Alias, Columns.User.Activated, s.Activated)
	}
	if s.Name != nil {
		s.where(query, Tables.User.Alias, Columns.User.Name, s.Name)
	}
	if s.CountryID != nil {
		s.where(query, Tables.User.Alias, Columns.User.CountryID, s.CountryID)
	}
	if s.Avatar != nil {
		s.where(query, Tables.User.Alias, Columns.User.Avatar, s.Avatar)
	}
	if s.AvatarAlt != nil {
		s.where(query, Tables.User.Alias, Columns.User.AvatarAlt, s.AvatarAlt)
	}

	s.apply(query)

	return query
}

func (s *UserSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}

type GeoCountrySearch struct {
	search

	ID   *int
	Code *string
}

func (s *GeoCountrySearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		s.where(query, Tables.GeoCountry.Alias, Columns.GeoCountry.ID, s.ID)
	}
	if s.Code != nil {
		s.where(query, Tables.GeoCountry.Alias, Columns.GeoCountry.Code, s.Code)
	}

	s.apply(query)

	return query
}

func (s *GeoCountrySearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}
